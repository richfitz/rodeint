% Generated by roxygen2 (4.0.0): do not edit by hand
\docType{class}
\name{stepper-class}
\alias{make_stepper}
\alias{make_stepper_basic}
\alias{make_stepper_controlled}
\alias{make_stepper_dense}
\alias{stepper}
\alias{stepper-class}
\alias{stepper_algorithms}
\alias{stepper_basic_algorithms}
\alias{stepper_categories}
\alias{stepper_controlled_algorithms}
\alias{stepper_dense_algorithms}
\title{Create ODE Stepper}
\usage{
stepper_algorithms(category, have_jacobian = FALSE)

stepper_basic_algorithms(have_jacobian = FALSE)

stepper_controlled_algorithms(have_jacobian = FALSE)

stepper_dense_algorithms(have_jacobian = FALSE)

stepper_categories()

make_stepper_basic(algorithm, abs_tol = NA_real_, rel_tol = NA_real_,
  has_jacobian = NA)

make_stepper_controlled(algorithm, abs_tol = 1e-06, rel_tol = 1e-06,
  has_jacobian = NA)

make_stepper_dense(algorithm, abs_tol = 1e-06, rel_tol = 1e-06,
  has_jacobian = NA)

make_stepper(category, algorithm, ...)
}
\arguments{
\item{category}{Either "basic" or "controlled"}

\item{have_jacobian}{Logical indicating if the stepper will work
on problems with a Jacobian (this is a superset: every problem
that provides a Jacobian will work fine with steppers that don't
require a Jacobian).}

\item{abs_tol}{Absolute tolerance (see odeint docs for now)}

\item{rel_tol}{Relative tolerance (see odeint docs for now)}

\item{has_jacobian}{Logical, indicating on whether the stepper
should use the internal data structures required by the stiff
systems.  This is likely to disappear soon, as it depends entirely
on the system itself.  The default, NA, will switch based on the
\code{algorithm} argument -- \code{rosenbrock4} is the stiff system
stepper.  However, to use other steppers with the stiff system, we
need to set up normal steppers similarly.  So probably at runtime
this will just rebuild the stepper for us.}

\item{category}{Either "basic" or "controlled"}

\item{algorithm}{The stepper algorithm (e.g. "runge_kutta4") - see
lists in \code{\link{stepper_algorithms}}}

\item{...}{Additional parameters passed from \code{make_stepper}
to either \code{make_stepper_basic} (none allowed) or
\code{make_stepper_controlled}.}
}
\description{
These functions, and the class \code{stepper} create a "stepper"
object for solving a system of ordinary differential equations
created with \code{\link{ode_system}}.  They cannot yet be used
for directly manually stepping a system of ODEs, but essentially
act as placeholders collecting information about algorithms.

Valid values for making a \code{\link{stepper}}.
}
\details{
There are three "categories" of stepper.  These are the broadest
class of distinctions between approaches

\itemize{
\item \code{basic}: step with a fixed step size
\item \code{controlled}: step with a step size that is tuned based
on errors reported by the stepper
\item \code{dense}: as for \code{controlled}, but it can make use
of "dense output" to interpolate points \emph{between} steps where
needed.
}

These correspond to the concepts "Stepper", "Controlled Stepper",
and "Dense Output Stepper" in the
\href{http://headmyshoulder.github.io/odeint-v2/doc/boost_numeric_odeint/odeint_in_detail/steppers.html}{odeint
documentation}.

Within steppers there are "algorithms" - these are the
mathematical rules used to advance the system.  Almost all the
algorithms in odeint are supported by rodeint.  There are many
\href{http://headmyshoulder.github.io/odeint-v2/doc/boost_numeric_odeint/odeint_in_detail/steppers.html#boost_numeric_odeint.odeint_in_detail.steppers.stepper_overview}{possible
algorithms}!

The functions \code{stepper_basic_algorithms},
\code{stepper_controlled_algorithms} and
\code{stepper_dense_algorithms} return vectors of valid
algorithms.

The \code{runge_kutta_dopri5} stepper is described by \code{odint}
as possibly "the best default stepper", so probably start with
that and see the \code{odeint} documentation for when the other
types might be more appropriate.

If your system has a Jacobian associated with it, you can also use
the \code{rosenbrock4} algorithm (for any of the three
categories).

Steppers in the "controlled" and "dense" categories adjust their
step size according the detected error, in an effort to take as
big a step as possible while keeping the error to within some
specified bounds.  The precise that this affects the stepper
depends on the algorithm, and is described in the
\href{http://headmyshoulder.github.io/odeint-v2/doc/boost_numeric_odeint/odeint_in_detail/steppers.html#boost_numeric_odeint.odeint_in_detail.steppers.controlled_steppers}{odeint
documentation}.  The parameter \code{abs_tol} changes the
tolerance for \emph{absolute} error while \code{abs_tol} changes
the tolerance for \emph{relative} error.  For the Runge Kutta
steppers the interpretation is similar, though I believe not
identical, to the steppers in \code{deSolve}.

Some algorithms in odeint are not supported yet:
\itemize{
\item Any of the multistep steppers (\code{adams_bashforth},
\code{adams_moulton}, \code{adams_bashforth_moulton}) because
these require explicit initialisation from another stepper and so
represent an interface challenge.  However, they are apparently
good for expensive functions, so might end up in the package soon.
\item Any of the "symplectic" steppers (\code{symplectic_euler},
\code{symplectic_rkn_sb3a_mclachlan},
\code{symplectic_rkn_sb3a_m4_mclachlan}) because I've never done
any work with Hamiltonian systems.  If these are implemented they
will get a new category.
\item The \code{velocity_verlet} stepper for second order systems.
\item The \code{implicit_euler} stepper for stiff systems.
}
}
\examples{
## The three stepper categories are:
stepper_categories()

## There are two ways of listing valid algorithms for a particular
## category: using stepper_algorithms(category):
stepper_algorithms("controlled")

## ...or using stepper_<category>_algorithms()
stepper_controlled_algorithms()

## If you add have_jacobian=TRUE to these calls you'll get the
## "rosenbrock4" stepper added to the list
stepper_algorithms("controlled", have_jacobian=TRUE)

## To build a stepper use the "make_stepper" function:
s <- make_stepper("controlled", "runge_kutta_dopri5")
print(s)

## The tolerances can be adjusted by passing in optional arguments
## "abs_tol" and "rel_tol"
s <- make_stepper("controlled", "runge_kutta_dopri5",
                  abs_tol=1e-4, rel_tol=1e-8)
print(s)
}
\author{
Rich FitzJohn
}


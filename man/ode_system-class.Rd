% Generated by roxygen2 (4.0.0): do not edit by hand
\docType{class}
\name{ode_system-class}
\alias{ode_system}
\alias{ode_system-class}
\title{Systems of ODEs}
\description{
See the documenation for \code{initialize} for creating, and
generally methods below.  Examples and proper documentation
coming.
}
\section{Methods}{

\describe{
\item{\code{derivs(y, t)}}{Compute the derivatives.  The first argument (\code{y}) is the
system state and the second (\code{t}) is the time.  No validation is
done on either variable.  This might change in the future.}

\item{\code{get_pars()}}{Extract parameters from the object.  If you are using a class-based
ode_system, this is the parameters passed in to the object and is not
necessarily the same as the way you are choosing to store processed
parameters.}

\item{\code{initialize(derivs, pars, jacobian = NULL, validate = NULL,
  deSolve_style = FALSE)}}{\itemize{
\item \code{derivs} Either
\itemize{
\item an R function of three parameters \code{(y, t, pars)} that
returns a vector of derivatives (dy/dt), the same length as \code{y}.
\item as R function that, when run with the single argument
\code{pars} returns a special object that will point at compiled
functions (\code{ode_system_cpp}) or a compiled class
\code{ode_system_class}. There will be more extensive documentation
coming on this soon.
}
\item \code{pars} the initial parameters, as accepted by your
function.  Generally this will be a numeric vector, but see
\code{set_pars}.  This exists so that we can establish the correct
parameter vector length, and to ensure that all systems have
\emph{something} initialised to prevent possible crashes or
unexpected behaviour.
\item \code{jacobian} If you are specifiying an R system and have
the jacobian, then this allows you to use stiff solvers
(e.g. \code{rosenbrock4}).  It needs to be an R function of three
parameters \code{(y, t, pars)} and return the Jacobian matrix.
\item \code{validate} optional function to run on parameters each
time they are set (see \code{set_pars}).  Useful for checking length,
positivity, etc.  The function should throw an error (stop) if the
parameters are not valid.  The return value of this function is
ignored.
\item \code{deSolve_style} Set this to \code{TRUE} if your R function
is in deSolve style rather than rodeint style (i.e., parameters
\code{(t, y, pars)} and returning a \emph{list} with the first
element being the derivatives).
}}

\item{\code{jacobian(y, t)}}{Compute the Jacobian.  Not all systems can do this}

\item{\code{set_pars(pars)}}{Set parameters within the object.

In addition to the validation carried out by \code{validate},
different targets check in different ways (you only need to know about
this if you are writing targets):
\itemize{
\item \code{ode_system_t}: No checking is done.  You can of course
check within the derivatives function.

\item \code{ode_system_cpp}: The parameters must be a numeric vector the
same length as the currently set parameters (so by extension the set
that it was initialised).  If you need variable length parameters you
will need to write a class. This might change once we have validation
functions.

\item \code{ode_system_class}: Parameters will be changed using whatever
you implemented in the \code{set_pars} function, including what is
impled by the conversion using \code{Rcpp::as<your_type>(SEXP)}.
}}
}}


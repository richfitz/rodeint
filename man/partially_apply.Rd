% Generated by roxygen2 (4.0.0): do not edit by hand
\name{partially_apply}
\alias{partially_apply}
\title{Partially Apply Arguments to a Function}
\usage{
partially_apply(f, ..., set_as_defaults = FALSE)
}
\arguments{
\item{f}{A function}

\item{...}{Named arguments to set}

\item{set_as_defaults}{Should values in \code{...} be set as
defaults?}
}
\description{
Partially apply arguments to a function, reducing the number of
arguments it takes, or setting them as defaults.
}
\details{
There are two strategies.  In the default, with
\code{set_as_defaults=FALSE}, we assign all supplied values into a
new environment that is placed ahead of the function's native
environment: the supplied values will be found first.  The
returned function will have an argument list that omits the given
arguments.

In the second, with \code{set_as_defaults=TRUE}, we set the
supplied values as defaults in the function's argument list.  The
returned function's argument list still includes the given
arguments, but they are all moved \emph{after} the unset values,
and kept in the order provided.  If the function contains
\code{...} as an argument, then these values will be put
\emph{after} the ellipsis, which means partial name matching won't
work (don't use it anyway!).

Both strategies seem to offer similar performance.  I suspect that
the \code{set_as_defaults=TRUE} strategy is a little more fragile.
They differ mainly in how the function is intended to be used - if
you want to forever specify particular values for a value, use
\code{set_as_defaults=FALSE}.  If you want to generate new
function that you might sometimes want to use different values in,
use \code{set_as_defaults=TRUE}.
}
\author{
Rich FitzJohn
}


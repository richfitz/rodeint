// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rodeint.h"
#include <Rcpp.h>

using namespace Rcpp;

// integrate_const_stiff_r
Rcpp::NumericVector integrate_const_stiff_r(rodeint::stepper s, rodeint::ode_system_stiff_r system, rodeint::ode_system_stiff_r::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_const_stiff_r(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_const_stiff_r(s, system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_const_stiff_cpp
Rcpp::NumericVector integrate_const_stiff_cpp(rodeint::stepper s, rodeint::ode_system_stiff_cpp system, rodeint::ode_system_stiff_cpp::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_const_stiff_cpp(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_const_stiff_cpp(s, system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_const_stiff_class
Rcpp::NumericVector integrate_const_stiff_class(rodeint::stepper s, rodeint::ode_system_stiff_class system, rodeint::ode_system_stiff_class::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_const_stiff_class(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_const_stiff_class(s, system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_n_steps_stiff_r
Rcpp::NumericVector integrate_n_steps_stiff_r(rodeint::stepper s, rodeint::ode_system_stiff_r system, rodeint::ode_system_stiff_r::state_type y, double t0, double dt, int n, bool save_state);
RcppExport SEXP rodeint_integrate_n_steps_stiff_r(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP dtSEXP, SEXP nSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_n_steps_stiff_r(s, system, y, t0, dt, n, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_n_steps_stiff_cpp
Rcpp::NumericVector integrate_n_steps_stiff_cpp(rodeint::stepper s, rodeint::ode_system_stiff_cpp system, rodeint::ode_system_stiff_cpp::state_type y, double t0, double dt, int n, bool save_state);
RcppExport SEXP rodeint_integrate_n_steps_stiff_cpp(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP dtSEXP, SEXP nSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_n_steps_stiff_cpp(s, system, y, t0, dt, n, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_n_steps_stiff_class
Rcpp::NumericVector integrate_n_steps_stiff_class(rodeint::stepper s, rodeint::ode_system_stiff_class system, rodeint::ode_system_stiff_class::state_type y, double t0, double dt, int n, bool save_state);
RcppExport SEXP rodeint_integrate_n_steps_stiff_class(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP dtSEXP, SEXP nSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_n_steps_stiff_class(s, system, y, t0, dt, n, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_adaptive_stiff_r
Rcpp::NumericVector integrate_adaptive_stiff_r(rodeint::stepper s, rodeint::ode_system_stiff_r system, rodeint::ode_system_stiff_r::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_adaptive_stiff_r(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_adaptive_stiff_r(s, system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_adaptive_stiff_cpp
Rcpp::NumericVector integrate_adaptive_stiff_cpp(rodeint::stepper s, rodeint::ode_system_stiff_cpp system, rodeint::ode_system_stiff_cpp::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_adaptive_stiff_cpp(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_adaptive_stiff_cpp(s, system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_adaptive_stiff_class
Rcpp::NumericVector integrate_adaptive_stiff_class(rodeint::stepper s, rodeint::ode_system_stiff_class system, rodeint::ode_system_stiff_class::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_adaptive_stiff_class(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_adaptive_stiff_class(s, system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_times_stiff_r
Rcpp::NumericMatrix integrate_times_stiff_r(rodeint::stepper s, rodeint::ode_system_stiff_r system, rodeint::ode_system_stiff_r::state_type y, std::vector<double> times, double dt);
RcppExport SEXP rodeint_integrate_times_stiff_r(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP timesSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::NumericMatrix __result = integrate_times_stiff_r(s, system, y, times, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_times_stiff_cpp
Rcpp::NumericMatrix integrate_times_stiff_cpp(rodeint::stepper s, rodeint::ode_system_stiff_cpp system, rodeint::ode_system_stiff_cpp::state_type y, std::vector<double> times, double dt);
RcppExport SEXP rodeint_integrate_times_stiff_cpp(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP timesSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::NumericMatrix __result = integrate_times_stiff_cpp(s, system, y, times, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_times_stiff_class
Rcpp::NumericMatrix integrate_times_stiff_class(rodeint::stepper s, rodeint::ode_system_stiff_class system, rodeint::ode_system_stiff_class::state_type y, std::vector<double> times, double dt);
RcppExport SEXP rodeint_integrate_times_stiff_class(SEXP sSEXP, SEXP systemSEXP, SEXP ySEXP, SEXP timesSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class >::type system(systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::NumericMatrix __result = integrate_times_stiff_class(s, system, y, times, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_const_r
Rcpp::NumericVector integrate_const_r(rodeint::stepper s, rodeint::ode_system_r ode_system, rodeint::ode_system_r::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_const_r(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_const_r(s, ode_system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_const_cpp
Rcpp::NumericVector integrate_const_cpp(rodeint::stepper s, rodeint::ode_system_cpp ode_system, rodeint::ode_system_cpp::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_const_cpp(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_const_cpp(s, ode_system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_const_class
Rcpp::NumericVector integrate_const_class(rodeint::stepper s, rodeint::ode_system_class ode_system, rodeint::ode_system_class::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_const_class(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_const_class(s, ode_system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_n_steps_r
Rcpp::NumericVector integrate_n_steps_r(rodeint::stepper s, rodeint::ode_system_r ode_system, rodeint::ode_system_r::state_type y, double t0, double dt, int n, bool save_state);
RcppExport SEXP rodeint_integrate_n_steps_r(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP dtSEXP, SEXP nSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_n_steps_r(s, ode_system, y, t0, dt, n, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_n_steps_cpp
Rcpp::NumericVector integrate_n_steps_cpp(rodeint::stepper s, rodeint::ode_system_cpp ode_system, rodeint::ode_system_cpp::state_type y, double t0, double dt, int n, bool save_state);
RcppExport SEXP rodeint_integrate_n_steps_cpp(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP dtSEXP, SEXP nSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_n_steps_cpp(s, ode_system, y, t0, dt, n, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_n_steps_class
Rcpp::NumericVector integrate_n_steps_class(rodeint::stepper s, rodeint::ode_system_class ode_system, rodeint::ode_system_class::state_type y, double t0, double dt, int n, bool save_state);
RcppExport SEXP rodeint_integrate_n_steps_class(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP dtSEXP, SEXP nSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_n_steps_class(s, ode_system, y, t0, dt, n, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_adaptive_r
Rcpp::NumericVector integrate_adaptive_r(rodeint::stepper s, rodeint::ode_system_r ode_system, rodeint::ode_system_r::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_adaptive_r(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_adaptive_r(s, ode_system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_adaptive_cpp
Rcpp::NumericVector integrate_adaptive_cpp(rodeint::stepper s, rodeint::ode_system_cpp ode_system, rodeint::ode_system_cpp::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_adaptive_cpp(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_adaptive_cpp(s, ode_system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_adaptive_class
Rcpp::NumericVector integrate_adaptive_class(rodeint::stepper s, rodeint::ode_system_class ode_system, rodeint::ode_system_class::state_type y, double t0, double t1, double dt, bool save_state);
RcppExport SEXP rodeint_integrate_adaptive_class(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP, SEXP save_stateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t0(t0SEXP );
        Rcpp::traits::input_parameter< double >::type t1(t1SEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::traits::input_parameter< bool >::type save_state(save_stateSEXP );
        Rcpp::NumericVector __result = integrate_adaptive_class(s, ode_system, y, t0, t1, dt, save_state);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_times_r
Rcpp::NumericMatrix integrate_times_r(rodeint::stepper s, rodeint::ode_system_r ode_system, rodeint::ode_system_r::state_type y, std::vector<double> times, double dt);
RcppExport SEXP rodeint_integrate_times_r(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP timesSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::NumericMatrix __result = integrate_times_r(s, ode_system, y, times, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_times_cpp
Rcpp::NumericMatrix integrate_times_cpp(rodeint::stepper s, rodeint::ode_system_cpp ode_system, rodeint::ode_system_cpp::state_type y, std::vector<double> times, double dt);
RcppExport SEXP rodeint_integrate_times_cpp(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP timesSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::NumericMatrix __result = integrate_times_cpp(s, ode_system, y, times, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrate_times_class
Rcpp::NumericMatrix integrate_times_class(rodeint::stepper s, rodeint::ode_system_class ode_system, rodeint::ode_system_class::state_type y, std::vector<double> times, double dt);
RcppExport SEXP rodeint_integrate_times_class(SEXP sSEXP, SEXP ode_systemSEXP, SEXP ySEXP, SEXP timesSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP );
        Rcpp::traits::input_parameter< double >::type dt(dtSEXP );
        Rcpp::NumericMatrix __result = integrate_times_class(s, ode_system, y, times, dt);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_r__get_pars
SEXP ode_system_stiff_r__get_pars(SEXP ode_system);
RcppExport SEXP rodeint_ode_system_stiff_r__get_pars(SEXP ode_systemSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        SEXP __result = ode_system_stiff_r__get_pars(ode_system);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_r__set_pars
void ode_system_stiff_r__set_pars(SEXP ode_system, SEXP pars);
RcppExport SEXP rodeint_ode_system_stiff_r__set_pars(SEXP ode_systemSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        ode_system_stiff_r__set_pars(ode_system, pars);
    }
    return R_NilValue;
END_RCPP
}
// ode_system_stiff_r__derivs
rodeint::ode_system_stiff_r::state_type ode_system_stiff_r__derivs(SEXP ode_system, rodeint::ode_system_stiff_r::state_type y, double t);
RcppExport SEXP rodeint_ode_system_stiff_r__derivs(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_stiff_r::state_type __result = ode_system_stiff_r__derivs(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_r__jacobian
rodeint::ode_system_stiff_r::matrix_type ode_system_stiff_r__jacobian(SEXP ode_system, rodeint::ode_system_stiff_r::state_type y, double t);
RcppExport SEXP rodeint_ode_system_stiff_r__jacobian(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_stiff_r::matrix_type __result = ode_system_stiff_r__jacobian(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_r__ctor
rodeint::ode_system_stiff_r ode_system_stiff_r__ctor(Rcpp::Function derivs, Rcpp::Function jacobian, SEXP pars);
RcppExport SEXP rodeint_ode_system_stiff_r__ctor(SEXP derivsSEXP, SEXP jacobianSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::Function >::type derivs(derivsSEXP );
        Rcpp::traits::input_parameter< Rcpp::Function >::type jacobian(jacobianSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        rodeint::ode_system_stiff_r __result = ode_system_stiff_r__ctor(derivs, jacobian, pars);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_cpp__get_pars
SEXP ode_system_stiff_cpp__get_pars(SEXP ode_system);
RcppExport SEXP rodeint_ode_system_stiff_cpp__get_pars(SEXP ode_systemSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        SEXP __result = ode_system_stiff_cpp__get_pars(ode_system);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_cpp__set_pars
void ode_system_stiff_cpp__set_pars(SEXP ode_system, SEXP pars);
RcppExport SEXP rodeint_ode_system_stiff_cpp__set_pars(SEXP ode_systemSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        ode_system_stiff_cpp__set_pars(ode_system, pars);
    }
    return R_NilValue;
END_RCPP
}
// ode_system_stiff_cpp__derivs
rodeint::ode_system_stiff_cpp::state_type ode_system_stiff_cpp__derivs(SEXP ode_system, rodeint::ode_system_stiff_cpp::state_type y, double t);
RcppExport SEXP rodeint_ode_system_stiff_cpp__derivs(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_stiff_cpp::state_type __result = ode_system_stiff_cpp__derivs(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_cpp__jacobian
rodeint::ode_system_stiff_cpp::matrix_type ode_system_stiff_cpp__jacobian(SEXP ode_system, rodeint::ode_system_stiff_cpp::state_type y, double t);
RcppExport SEXP rodeint_ode_system_stiff_cpp__jacobian(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_stiff_cpp::matrix_type __result = ode_system_stiff_cpp__jacobian(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_class__get_pars
SEXP ode_system_stiff_class__get_pars(SEXP ode_system);
RcppExport SEXP rodeint_ode_system_stiff_class__get_pars(SEXP ode_systemSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        SEXP __result = ode_system_stiff_class__get_pars(ode_system);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_class__set_pars
void ode_system_stiff_class__set_pars(SEXP ode_system, SEXP pars);
RcppExport SEXP rodeint_ode_system_stiff_class__set_pars(SEXP ode_systemSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        ode_system_stiff_class__set_pars(ode_system, pars);
    }
    return R_NilValue;
END_RCPP
}
// ode_system_stiff_class__derivs
rodeint::ode_system_stiff_class::state_type ode_system_stiff_class__derivs(SEXP ode_system, rodeint::ode_system_stiff_class::state_type y, double t);
RcppExport SEXP rodeint_ode_system_stiff_class__derivs(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_stiff_class::state_type __result = ode_system_stiff_class__derivs(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_stiff_class__jacobian
rodeint::ode_system_stiff_class::matrix_type ode_system_stiff_class__jacobian(SEXP ode_system, rodeint::ode_system_stiff_class::state_type y, double t);
RcppExport SEXP rodeint_ode_system_stiff_class__jacobian(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_stiff_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_stiff_class::matrix_type __result = ode_system_stiff_class__jacobian(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_r__get_pars
SEXP ode_system_r__get_pars(SEXP ode_system);
RcppExport SEXP rodeint_ode_system_r__get_pars(SEXP ode_systemSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        SEXP __result = ode_system_r__get_pars(ode_system);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_r__set_pars
void ode_system_r__set_pars(SEXP ode_system, SEXP pars);
RcppExport SEXP rodeint_ode_system_r__set_pars(SEXP ode_systemSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        ode_system_r__set_pars(ode_system, pars);
    }
    return R_NilValue;
END_RCPP
}
// ode_system_r__derivs
rodeint::ode_system_r::state_type ode_system_r__derivs(SEXP ode_system, rodeint::ode_system_r::state_type y, double t);
RcppExport SEXP rodeint_ode_system_r__derivs(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_r::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_r::state_type __result = ode_system_r__derivs(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_r__ctor
rodeint::ode_system_r ode_system_r__ctor(Rcpp::Function derivs, SEXP pars);
RcppExport SEXP rodeint_ode_system_r__ctor(SEXP derivsSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::Function >::type derivs(derivsSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        rodeint::ode_system_r __result = ode_system_r__ctor(derivs, pars);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_cpp__get_pars
SEXP ode_system_cpp__get_pars(SEXP ode_system);
RcppExport SEXP rodeint_ode_system_cpp__get_pars(SEXP ode_systemSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        SEXP __result = ode_system_cpp__get_pars(ode_system);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_cpp__set_pars
void ode_system_cpp__set_pars(SEXP ode_system, SEXP pars);
RcppExport SEXP rodeint_ode_system_cpp__set_pars(SEXP ode_systemSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        ode_system_cpp__set_pars(ode_system, pars);
    }
    return R_NilValue;
END_RCPP
}
// ode_system_cpp__derivs
rodeint::ode_system_cpp::state_type ode_system_cpp__derivs(SEXP ode_system, rodeint::ode_system_cpp::state_type y, double t);
RcppExport SEXP rodeint_ode_system_cpp__derivs(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_cpp::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_cpp::state_type __result = ode_system_cpp__derivs(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_class__get_pars
SEXP ode_system_class__get_pars(SEXP ode_system);
RcppExport SEXP rodeint_ode_system_class__get_pars(SEXP ode_systemSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        SEXP __result = ode_system_class__get_pars(ode_system);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ode_system_class__set_pars
void ode_system_class__set_pars(SEXP ode_system, SEXP pars);
RcppExport SEXP rodeint_ode_system_class__set_pars(SEXP ode_systemSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP );
        ode_system_class__set_pars(ode_system, pars);
    }
    return R_NilValue;
END_RCPP
}
// ode_system_class__derivs
rodeint::ode_system_class::state_type ode_system_class__derivs(SEXP ode_system, rodeint::ode_system_class::state_type y, double t);
RcppExport SEXP rodeint_ode_system_class__derivs(SEXP ode_systemSEXP, SEXP ySEXP, SEXP tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ode_system(ode_systemSEXP );
        Rcpp::traits::input_parameter< rodeint::ode_system_class::state_type >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type t(tSEXP );
        rodeint::ode_system_class::state_type __result = ode_system_class__derivs(ode_system, y, t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stepper__ctor
rodeint::stepper stepper__ctor(std::string category, std::string algorithm, bool ublas_state, double abs_tol, double rel_tol);
RcppExport SEXP rodeint_stepper__ctor(SEXP categorySEXP, SEXP algorithmSEXP, SEXP ublas_stateSEXP, SEXP abs_tolSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type category(categorySEXP );
        Rcpp::traits::input_parameter< std::string >::type algorithm(algorithmSEXP );
        Rcpp::traits::input_parameter< bool >::type ublas_state(ublas_stateSEXP );
        Rcpp::traits::input_parameter< double >::type abs_tol(abs_tolSEXP );
        Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP );
        rodeint::stepper __result = stepper__ctor(category, algorithm, ublas_state, abs_tol, rel_tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stepper__details
Rcpp::CharacterVector stepper__details(rodeint::stepper s);
RcppExport SEXP rodeint_stepper__details(SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< rodeint::stepper >::type s(sSEXP );
        Rcpp::CharacterVector __result = stepper__details(s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_harmonic_oscillator_cpp
rodeint::ode_system_cpp test_harmonic_oscillator_cpp(std::vector<double> pars);
RcppExport SEXP rodeint_test_harmonic_oscillator_cpp(SEXP parsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type pars(parsSEXP );
        rodeint::ode_system_cpp __result = test_harmonic_oscillator_cpp(pars);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_harmonic_oscillator_class
rodeint::ode_system_class test_harmonic_oscillator_class(double pars);
RcppExport SEXP rodeint_test_harmonic_oscillator_class(SEXP parsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type pars(parsSEXP );
        rodeint::ode_system_class __result = test_harmonic_oscillator_class(pars);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_harmonic_oscillator_deSolve_c
rodeint::ode_system_class test_harmonic_oscillator_deSolve_c(std::vector<double> pars);
RcppExport SEXP rodeint_test_harmonic_oscillator_deSolve_c(SEXP parsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type pars(parsSEXP );
        rodeint::ode_system_class __result = test_harmonic_oscillator_deSolve_c(pars);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_stiff_cpp
rodeint::ode_system_stiff_cpp test_stiff_cpp(std::vector<double> pars);
RcppExport SEXP rodeint_test_stiff_cpp(SEXP parsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type pars(parsSEXP );
        rodeint::ode_system_stiff_cpp __result = test_stiff_cpp(pars);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_stiff_class
rodeint::ode_system_stiff_class test_stiff_class(std::vector<double> pars);
RcppExport SEXP rodeint_test_stiff_class(SEXP parsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type pars(parsSEXP );
        rodeint::ode_system_stiff_class __result = test_stiff_class(pars);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ptr_address
std::string ptr_address(SEXP ptr);
RcppExport SEXP rodeint_ptr_address(SEXP ptrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP );
        std::string __result = ptr_address(ptr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
